---
import { getCollection } from 'astro:content';

// Get the language based on the current URL
const currentPath = Astro.url.pathname; // Example: "/docs/en/intro", "/docs/pt/intro", "/docs/lg/intro"
const lang = currentPath.includes('/pt/') ? 'pt' : currentPath.includes('/lg/') ? 'lg' : 'en';

// Define the URL to switch between languages
const langSwitchUrl = {
  en: currentPath.replace('/docs/pt/', '/docs/en/').replace('/docs/lg/', '/docs/en/'),
  pt: currentPath.replace('/docs/en/', '/docs/pt/').replace('/docs/lg/', '/docs/pt/'),
  lg: currentPath.replace('/docs/en/', '/docs/lg/').replace('/docs/pt/', '/docs/lg/')
};

interface Props {
  version?: string;
}

const { version = 'latest' } = Astro.props;
const docs = await getCollection('docs', ({ data }) => data.version === version && data.lang === lang);

const sortedDocs = docs.sort((a, b) => Number(a.data.order || 0) - Number(b.data.order || 0));

const docsByFolder = sortedDocs.reduce((acc, doc) => {
  if (!doc.slug) return acc;

  const slugParts = doc.slug.split('/');
  const filteredParts = slugParts.filter(part => !['en', 'pt', 'lg'].includes(part)); // Remove o idioma
  const folderPath = filteredParts.length > 1 ? filteredParts.slice(0, -1).join('/') : 'root';

  if (!acc[folderPath]) acc[folderPath] = [];
  acc[folderPath].push(doc);

  return acc;
}, {} as Record<string, typeof docs>);

const orderedDocsByFolder = Object.entries(docsByFolder).sort(([a], [b]) => {
  const numA = parseInt(a.match(/\d+$/)?.[0] ?? "0", 10);
  const numB = parseInt(b.match(/\d+$/)?.[0] ?? "0", 10);
  
  const prefixA = a.replace(/\d+$/, "");
  const prefixB = b.replace(/\d+$/, "");

  return prefixA.localeCompare(prefixB) || numA - numB;
});
---

<!-- Navbar -->
<nav class="bg-[#1E1E2E] text-white fixed top-0 left-0 right-0 h-14 shadow-md z-10">
  <div class="flex items-center justify-between px-6 h-full">
    <!-- Button to open the menu on mobile -->
    <button id="openMenu" class="md:hidden text-white p-2 rounded focus:outline-none" aria-label="Open menu">
      ☰
    </button>
    <!-- Logo and title -->
   <div class="flex items-center space-x-3">
      <img src="https://www.skatehive.app/SKATE_HIVE_VECTOR_FIN.svg" alt="Skatehive Logo" class="h-12">
      <a href="/" class="text-lg font-semibold hover:text-gray-300 transition">
        IA Skatehive Docs
      </a>
    </div>

  <!-- Language switch button -->
<div class="relative">
  <button id="languageButton" class="px-4 py-2 text-gray-300 hover:bg-[#3F3F5B] hover:text-white rounded-md transition duration-200 flex items-center">
    <img src={lang === 'en' ? 'https://flagcdn.com/us.svg' : lang === 'pt' ? 'https://flagcdn.com/br.svg' : 'https://flagcdn.com/ug.svg'} alt={lang} class="w-5 h-5 mr-2"/>
    {lang === 'en' ? 'English' : lang === 'pt' ? 'Português' : 'Luganda'}
    <svg class="w-4 h-4 ml-2" fill="currentColor" viewBox="0 0 20 20">
      <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
    </svg>
  </button>
  <div id="languageMenu" class="absolute hidden bg-[#3F3F5B] text-white rounded-md shadow-lg mt-2 w-32">
    <a href={langSwitchUrl['en']} class="block px-4 py-2 hover:bg-[#565676] transition flex items-center">
      <img src="https://flagcdn.com/us.svg" alt="English" class="w-5 h-5 mr-2"/>
      English
    </a>
    <a href={langSwitchUrl['pt']} class="block px-4 py-2 hover:bg-[#565676] transition flex items-center">
      <img src="https://flagcdn.com/br.svg" alt="Portuguese" class="w-5 h-5 mr-2"/>
      Português
    </a>
    <a href={langSwitchUrl['lg']} class="block px-4 py-2 hover:bg-[#565676] transition flex items-center">
      <img src="https://flagcdn.com/ug.svg" alt="Luganda" class="w-5 h-5 mr-2"/>
      Luganda
    </a>
  </div>
</div>
  </div>
</nav>

<!-- Sidebar -->
<aside id="sidebarMenu" class="fixed top-14 left-0 h-full w-64 bg-[#1E1E2E] text-white shadow-lg transform -translate-x-full transition-transform duration-300 md:translate-x-0 md:relative md:shadow-none overflow-y-auto">
  <ul class="space-y-4">
    {orderedDocsByFolder.length > 0 ? (
      orderedDocsByFolder.map(([folder, docs]) => (
        <li key={folder}>
          <h3 class="text-gray-400 text-sm uppercase font-semibold px-4 py-2">{folder}</h3>
          <ul class="space-y-2 pl-4">
            {docs.map((doc) => (
              <li key={doc.slug}>
                <a 
                  href={`/docs/${doc.slug}`}
                  class={`block px-4 py-2 text-gray-300 hover:bg-[#3F3F5B] hover:text-white rounded-md transition duration-200 ${
                    currentPath.includes(doc.slug) ? 'bg-[#565676]' : ''
                  }`}
                >
                  {doc.data.title}
                </a>
              </li>
            ))}
          </ul>
        </li>
      ))
    ) : (
      <p class="text-gray-500 px-4">No documentation found.</p>
    )}
  </ul>
</aside>

<!-- Main Content -->
<main class="pt-14">
  <slot />
</main>

<script>
 document.addEventListener("DOMContentLoaded", () => {
    const languageButton = document.getElementById("languageButton");
    const languageMenu = document.getElementById("languageMenu");

    let isMenuOpen = false;

    languageButton.addEventListener("click", (event) => {
      event.stopPropagation();
      isMenuOpen = !isMenuOpen;
      languageMenu.classList.toggle("hidden", !isMenuOpen);
    });

    document.addEventListener("click", (event) => {
      if (!languageMenu.contains(event.target) && !languageButton.contains(event.target)) {
        isMenuOpen = false;
        languageMenu.classList.add("hidden");
      }
    });
  });

  const openMenuButton = document.getElementById('openMenu');
  const menu = document.getElementById('sidebarMenu');
  const body = document.body;

  openMenuButton?.addEventListener('click', () => {
    menu?.classList.toggle('-translate-x-full');
    body.classList.toggle('no-scroll');
  });

  document.addEventListener('click', (e) => {
    if (!menu.contains(e.target) && !openMenuButton.contains(e.target) && window.innerWidth < 768) {
      menu.classList.add('-translate-x-full');
      body.classList.remove('no-scroll');
    }
  });
</script>

<style is:global>
  body.no-scroll {
    overflow: hidden;
  }
  nav {
    height: 56px;
  }

  main {
    padding-top: 56px;
  }

  #sidebarMenu {
    background-color: #1E1E2E;
    color: #FFFFFF;
  }

   /* Mobile Styles */
  @media (max-width: 768px) {
    #sidebarMenu {
    width: 250px; 
      z-index: 20;
      position: fixed; 
      top: 56px;  
      left: 0;
      height: calc(100vh - 56px); /* A altura da sidebar ocupa o restante da tela, descontando a altura da navbar */
      overflow-y: auto; 
    }

    #sidebarMenu.-translate-x-full {
      transform: translateX(-100%);
    }

    /* Menu abrir/fechar */
    #openMenu {
      display: block;
    }
  }

  li a {
    font-size: 16px;
    font-weight: 500;
    display: block;
    border-radius: 8px;
    transition: all 0.3s ease-in-out;
  }

  li a:hover {
    transform: translateX(5px);
  }

  @media (max-width: 768px) {
    aside {
      width: 250px;
      z-index: 20;
    }
  }

  @media (min-width: 768px) {
    #openMenu {
      display: none;
    }
  }
</style>
